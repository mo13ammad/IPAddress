# Workflow Name
name: Sync Steam Game Servers

# Triggers: When should this workflow run?
on:
  # Allows manual execution from the GitHub Actions tab
  workflow_dispatch:

  # Scheduled run: Every hour, at the beginning of the hour
  schedule:
    - cron: '0 * * * *'

jobs:
  sync-games:
    # Prevent this workflow from running concurrently with itself.
    concurrency:
      group: ${{ github.workflow }}
      cancel-in-progress: false
      
    # Use the latest version of Ubuntu for this job
    runs-on: ubuntu-latest
    # Increase the timeout because fetching all apps can be time-consuming
    timeout-minutes: 180

    # Grant write permissions to the GITHUB_TOKEN for this job
    permissions:
      contents: write

    # Job steps
    steps:
      # Step 1: Checkout your repository's code
      - name: Checkout local repository
        uses: actions/checkout@v4
        with:
          # Fetch all history to compare files correctly
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # Step 2: Sync and Commit Steam Game Servers
      - name: Sync and Commit Steam Game Servers
        run: |
          # Install jq, a command-line JSON processor
          sudo apt-get update && sudo apt-get install -y jq

          # Configure Git for committing with your details
          git config --global user.name "mo13ammad"
          git config --global user.email "mo13ammad@users.noreply.github.com"

          echo "Creating game server directory..."
          mkdir -p game-servers/steam

          echo "Fetching the complete list of Steam apps..."
          curl -s "https://api.steampowered.com/ISteamApps/GetAppList/v2/" -o applist.json

          # Robust check to ensure the fetched applist is a valid JSON with the expected structure
          if ! jq -e '.applist.apps | type == "array"' applist.json > /dev/null; then
            echo "Error: Fetched app list is invalid or does not contain '.applist.apps' array. Skipping this run."
            exit 0
          fi

          COMMITS_SINCE_LAST_PUSH=0
          PROCESSED_COUNT=0
          # Push changes in batches to save progress
          BATCH_SIZE=500

          echo "Processing all apps and committing changes individually..."
          jq -c '.applist.apps[]' applist.json | while read -r app; do
            APP_ID=$(echo "$app" | jq -r '.appid')
            GAME_NAME=$(echo "$app" | jq -r '.name')

            if [ -z "$GAME_NAME" ] || [ ${#GAME_NAME} -lt 2 ]; then
              continue
            fi
            
            FILENAME=$(echo "$GAME_NAME" | tr -c '[:alnum:]_.-' '_')
            FILEPATH="game-servers/steam/${FILENAME}.cidr"
            
            API_URL="https://api.steampowered.com/ISteamApps/GetSDRConfig/v1?appid=${APP_ID}"
            IP_LIST=$(curl -s --max-time 10 "$API_URL" | jq -r '.pops[].relays[]? | .ipv4, .ipv6 | select(. != null)')

            if [ -n "$IP_LIST" ]; then
              TMP_FILE=$(mktemp)
              echo "$IP_LIST" > "$TMP_FILE"

              if [ ! -f "$FILEPATH" ] || ! diff -q "$TMP_FILE" "$FILEPATH" >/dev/null; then
                echo "Changes found for: $GAME_NAME. Saving and committing..."
                mv "$TMP_FILE" "$FILEPATH"
                
                git add "$FILEPATH"
                COMMIT_DATE=$(TZ="Asia/Tehran" date +'%Y-%m-%d %H:%M:%S')
                git commit -m "Auto-sync: Update IPs for $GAME_NAME on $COMMIT_DATE"
                COMMITS_SINCE_LAST_PUSH=$((COMMITS_SINCE_LAST_PUSH + 1))
              else
                rm "$TMP_FILE"
              fi
            fi

            PROCESSED_COUNT=$((PROCESSED_COUNT + 1))
            # Push batch if size is reached
            if [ "$PROCESSED_COUNT" -ge "$BATCH_SIZE" ]; then
              if [ "$COMMITS_SINCE_LAST_PUSH" -gt 0 ]; then
                echo "Batch size reached. Pushing $COMMITS_SINCE_LAST_PUSH new commit(s)..."
                git push
                COMMITS_SINCE_LAST_PUSH=0
              fi
              PROCESSED_COUNT=0
            fi
          done

          # Final push for any remaining commits
          if [ "$COMMITS_SINCE_LAST_PUSH" -gt 0 ]; then
            echo "Pushing final $COMMITS_SINCE_LAST_PUSH new commit(s)..."
            git push
          fi
          
          rm applist.json
          echo "Finished processing batch."
