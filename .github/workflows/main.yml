# Workflow Name
name: Sync External Repositories

# Triggers: When should this workflow run?
on:
  # Allows manual execution from the GitHub Actions tab
  workflow_dispatch:

  # Scheduled run: Every 30 minutes
  schedule:
    - cron: '*/30 * * * *'

jobs:
  sync:
    # Use the latest version of Ubuntu for this job
    runs-on: ubuntu-latest
    # Increase the timeout because fetching all apps can be time-consuming
    timeout-minutes: 180

    # Grant write permissions to the GITHUB_TOKEN for this job
    permissions:
      contents: write

    # Job steps
    steps:
      # Step 1: Checkout your repository's code
      - name: Checkout local repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Step 2: Sync Country IP Blocks
      - name: Sync from herrbischoff/country-ip-blocks
        run: |
          echo "Cloning source repository for country IPs..."
          git clone --depth 1 https://github.com/herrbischoff/country-ip-blocks.git temp_source_repo

          echo "Syncing country IPs to custom directory names..."
          mkdir -p ipv4-countries
          mkdir -p ipv6-countries

          rsync -av --delete temp_source_repo/ipv4/ ipv4-countries/
          rsync -av --delete temp_source_repo/ipv6/ ipv6-countries/

          echo "Cleaning up temporary directory..."
          rm -rf temp_source_repo

      # Step 3: Sync ALL Steam Game Server IPs
      - name: Sync Steam Game Servers
        run: |
          # Install jq, a command-line JSON processor
          sudo apt-get update && sudo apt-get install -y jq

          echo "Creating game server directory..."
          mkdir -p game-servers/steam

          echo "Fetching the complete list of Steam apps..."
          # Fetch the entire app list from Steam's API and save to a temporary file
          curl -s "https://api.steampowered.com/ISteamApps/GetAppList/v2/" -o applist.json

          # Check if the applist was fetched successfully
          if [ ! -s applist.json ]; then
            echo "Error: Failed to fetch Steam app list."
            exit 1
          fi

          echo "Processing all apps... This may take a long time."
          # Iterate over each app from the applist.json file
          # The 'jq -c' command outputs each JSON object on a single line for easier processing in the shell
          jq -c '.applist.apps[]' applist.json | while read -r app; do
            APP_ID=$(echo "$app" | jq -r '.appid')
            GAME_NAME=$(echo "$app" | jq -r '.name')

            # Skip apps with no name or very short names
            if [ -z "$GAME_NAME" ] || [ ${#GAME_NAME} -lt 2 ]; then
              continue
            fi
            
            # Create a safe filename (replace invalid characters with underscore)
            FILENAME=$(echo "$GAME_NAME" | tr -c '[:alnum:]_.-' '_')
            FILEPATH="game-servers/steam/${FILENAME}.cidr"
            
            # Fetch server IPs for the current App ID
            API_URL="https://api.steampowered.com/ISteamApps/GetSDRConfig/v1?appid=${APP_ID}"
            IP_LIST=$(curl -s "$API_URL" | jq -r '.pops[].relays[]? | .ipv4, .ipv6 | select(. != null)')

            # If the IP list is not empty, write it to the file
            if [ -n "$IP_LIST" ]; then
              echo "Found server IPs for: $GAME_NAME (AppID: $APP_ID). Saving to $FILENAME.cidr"
              echo "$IP_LIST" > "$FILEPATH"
            fi
          done
          
          echo "Finished syncing all discoverable Steam game servers."
          # Clean up the temporary applist file
          rm applist.json

      # Step 4: Commit and push changes if any exist
      - name: Commit and push changes
        run: |
          # Configure Git for committing with your details
          git config --global user.name "mo13ammad"
          git config --global user.email "mo13ammad@users.noreply.github.com"

          # Stage all changes, including new and modified files
          git add .

          # Check if there are any staged changes to be committed
          if ! git diff --staged --quiet; then
            echo "Changes detected. Committing and pushing..."
            
            # Create a commit message with the date and time in Tehran time
            COMMIT_DATE=$(TZ="Asia/Tehran" date +'%Y-%m-%d %H:%M:%S')
            git commit -m "Auto-sync: Data updated on $COMMIT_DATE (Tehran Time)"
            
            # Push the changes to your repository
            git push
          else
            echo "No changes to commit. Working tree is clean."
          fi
